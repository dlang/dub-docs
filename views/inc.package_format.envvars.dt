p Inside of build setting values, it is possible to use variables using dollar notation. Any variable not matching a predefined name will be taken from the program environment. To denote a literal dollar sign, use #[code $$]. The predefined variables are:
table
	tr
		th Variable
		th Content
	tr
		td: code $PACKAGE_DIR
		td Path to the package itself
	tr
		td: code $ROOT_PACKAGE_DIR
		td Path to the root package of the build dependency tree
	tr
		td: code $&lt;name&gt;_PACKAGE_DIR
		td Path to a specific package that is part of the package's dependency graph. $&lt;name&gt; must be in uppercase letters without the semver string. 
	tr
		td: code $DUB
		td Path to the DUB executable

p Inside of build setting values, the following variables are also supported:
table
	tr
		th Variable
		th Content
	tr
		td: code $ARCH
		td CPU architecture: <code>"x86", "x86_64"</code>
	tr
		td: code $PLATFORM
		td Running platform: <code>"linux", "windows", ...</code>
	tr
		td: code $PLATFORM_POSIX
		td Running platform: <code>"posix", "windows", ...</code>
	tr
		td: code $BUILD_TYPE
		td Type of build: <code>"debug", "release", ...</code>

p Inside of custom command directives a different set of predefined variables is available:

table
	tr
		th Variable
		th Content
	tr
		td: code $DUB_PACKAGE
		td Name of the package
	tr
		td: code $DUB_PACKAGE_VERSION
		td Version of the package
	tr
		td: code $DUB_ROOT_PACKAGE
		td Name of the root package that is being built
	tr
		td: code $DUB_ROOT_PACKAGE_TARGET_TYPE
		td Contents of the "targetType" field of the root package as defined by the package recipe
	tr
		td: code $DUB_ROOT_PACKAGE_TARGET_PATH
		td Contents of the "targetPath" field of the root package as defined by the package recipe
	tr
		td: code $DUB_ROOT_PACKAGE_TARGET_NAME
		td Contents of the "targetName" field of the root package as defined by the package recipe
	tr
		td: code $DFLAGS
		td Contents of the "dflags" field as defined by the package recipe
	tr
		td: code $LFLAGS
		td Contents of the "lflags" field as defined by the package recipe
	tr
		td: code $VERSIONS
		td Contents of the "versions" field as defined by the package recipe
	tr
		td: code $LIBS
		td Contents of the "libs" field as defined by the package recipe
	tr
		td: code $SOURCE_FILES
		td Contents of the "sourceFiles" field as defined by the package recipe
	tr
		td: code $IMPORT_PATHS
		td Contents of the "importPaths" field as defined by the package recipe
	tr
		td: code $STRING_IMPORT_PATHS
		td Contents of the "stringImportPaths" field as defined by the package recipe
	tr
		td: code $DC
		td Compiler binary name (e.g. "../dmd" or "ldc2")
	tr
		td: code $DC_BASE
		td Canonical name of the compiler (e.g. "dmd" or "ldc")
	tr
		td: code $D_FRONTEND_VER
		td The compiler frontend version represented as a single integer, for example "2072" for DMD 2.072.2
	tr
		td: code $DUB_EXE
		td Path to the DUB executable
	tr
		td: code $DUB_PLATFORM
		td Name of the target platform (e.g. "windows" or "linux")
	tr
		td: code $DUB_ARCH
		td Name of the target architecture (e.g. "x86" or "x86_64")
	tr
		td: code $DUB_TARGET_TYPE
		td Contents of the "targetType" field as defined by the package recipe
	tr
		td: code $DUB_TARGET_PATH
		td Contents of the "targetPath" field as defined by the package recipe
	tr
		td: code $DUB_TARGET_NAME
		td Contents of the "targetName" field as defined by the package recipe
	tr
		td: code $DUB_WORKING_DIRECTORY
		td Working directory in which the compiled program gets run
	tr
		td: code $DUB_MAIN_SOURCE_FILE
		td Contents of the "mainSourceFile" field as defined by the package recipe
	tr
		td: code $DUB_CONFIG
		td Name of the selected build configuration (e.g. "application" or "library")
	tr
		td: code $DUB_BUILD_TYPE
		td Name of the selected build type (e.g. "debug" or "unittest")
	tr
		td: code $DUB_BUILD_MODE
		td Name of the selected build mode (e.g. "separate" or "singleFile")
	tr
		td: code $DUB_BUILD_PATH
		td Absolute path in which the package was compiled (defined for "postBuildCommands" only)
	tr
		td: code $DUB_COMBINED
		td "TRUE" if the #[code --combined] flag was used, empty otherwise
	tr
		td: code $DUB_RUN
		td "TRUE" if the "run" command was invoked, empty otherwise
	tr
		td: code $DUB_FORCE
		td "TRUE" if the #[code --force] flag was used, empty otherwise
	tr
		td: code $DUB_RDMD
		td "TRUE" if the #[code --rdmd] flag was used, empty otherwise
	tr
		td: code $DUB_TEMP_BUILD
		td "TRUE" if the #[code --temp-build] flag was used, empty otherwise
	tr
		td: code $DUB_PARALLEL_BUILD
		td "TRUE" if the #[code --parallel] flag was used, empty otherwise
	tr
		td: code $DUB_RUN_ARGS
		td Contains the arguments passed to the built executable in shell compatible format
