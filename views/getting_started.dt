extends layout

block title
	- auto title = "Getting Started With DUB";

block body
	h2 Installing DUB

	p DUB is the D language's official package manager, providing simple and configurable cross-platform builds. DUB can also generate VisualD and Mono-D package files for easy IDE support.

	p DUB comes with the standard `dmd` package/installer from <a href="https://dlang.org">dlang.org</a>.

	p To install DUB, search your operating system's package manager or <a href="https://github.com/dlang/dub/releases">download</a> the pre-compiled package for your platform. The Windows installer will perform all installation steps; for other archives, you will want to ensure the DUB executable is in your path. Installation from source on other platforms is as simple as installing the dmd development files and your system's libcurl-dev, then running <code>./build.sh</code> in the repository's folder.

	h2#own-projects Starting a new project

	p From your top-level source directory, run:

	pre.code $ dub init myproject

	p This begins an interactive session:

	pre.code.
		Package recipe format (sdl/json) [json]:
		Name [myproject]:
		Description [A minimal D application.]: My first project
		Author name [imadev]: My Name
		License [proprietary]: Boost
		Copyright string [Copyright © 2017, imadev]:
		Add dependency (leave empty to skip) []:
		Successfully created an empty project in '/home/imadev/src/myproject'.
		Package successfully created in myproject

	p DUB has created a "myproject" directory containing a .gitignore, a dub configuration file, and a source/app.d source tree.

	p Notice that there are two configuration file formats available. JSON is a commonly-known format, and SDL (SDLang) is a clean, minimalist format. Both offer equivalent functionality (though unlike JSON, SDLang allows comments); use whichever you prefer.

	p The following configuration file is generated:
	table
		tr
			th JSON
			th SDLang
		tr
			td
				pre.code.lang-json
					|{
					|	"name": "myproject",
					|	"authors": [
					|		"My Name"
					|	],
					|	"description": "My first project",
					|	"copyright": "Copyright © 2017, imadev",
					|	"license": "Boost"
					|}
			td
				pre.code.lang-sdl.
					name "myproject"
					description "My first project"
					authors "My Name"
					copyright "Copyright © 2017, imadev"
					license "Boost"

	p For more information and help with configuring your builds, see the documentation for <a href="package-format-json">JSON</a> and <a href="package-format-sdl">SDLang</a>. DUB is smart and will provide sane defaults, but you can override almost anything.

	p Execute <code>dub build</code> to build your project, <code>dub run</code> to build and run it, or <code>dub test</code> to build and run unit tests. The last line below is the output of the default application.

	pre.code.
		$ dub run
		Performing "debug" build using dmd for x86.
		myproject ~master: building configuration "application"...
		Linking...
		Running ./myproject.exe
		Edit source/app.d to start your project.

	p See the <a href="commandline">command line interface documentation</a>, or run <code>dub --help</code> and <code>dub &lt;command&gt; --help</code> for more information.

	h2#adding-deps Adding a dependency

	p When you find a package to use from the <a href="https://code.dlang.org">DUB registry</a>, add it to the dependency list in your DUB configuration file by running <code>dub add &lt;packageName&gt;</code>.

	p The DUB registry uses git tags to determine application versioning and DUB's dependency management is designed to work best according to <a href="http://semver.org">SemVer</a> rules. Please follow the rules of the SemVer specification for all packages you list on the registry. See the <a href="http://code.dlang.org/package-format?lang=json#version-specs">package documentation</a> for more information on dependency version specification.

	p You can publish packages to <a href="/publish">the registry here</a>.

	h2#foreign-projects Building a third-party project

	p You can easily fetch and build third-party projects published to the dub registry via the <code>dub fetch &lt;package name&gt;</code> command.

	p To get the package, run <code>dub fetch &lt;package name&gt;</code> to download the package and install it in your user build directory. <code>dub run &lt;package name&gt;</code> can then be used to build and execute the package. <code>dub fetch --cache=local &lt;package name&gt;</code> will extract the package into a subfolder of your current working directory.

	h2#advanced-usage Advanced usage

	p For more advanced feature, like single-file packages and managing local packages, please see <a href="/advanced_usage">the advanced usage guide</a>.
