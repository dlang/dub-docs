extends layout

block title
	- auto title = "Package file format (JSON)";

block body
	- enum iff = `<a href="https://en.wikipedia.org/wiki/If_and_only_if" class="blind"><em>iff</em></a>`;

	h2 Introduction

	p
		strong NOTE: this describes the JSON version of the package file format. See also the <a href="package-format-sdl">specification based on SDLang</a>.

	p Every DUB package <em>should</em> contain a <code>dub.json</code> (or <code>dub.sdl</code>, formerly also <code>package.json</code>) file in its root folder. This file contains meta-information about the project and its dependencies. This information is used for building the project and for deploying it using the registry. The following sections give an overview of the recognized settings and their meaning. Note that any unknown settings are ignored for backwards compatibility reasons.

	p A typical example of a simple application that requires no platform specific setup:

	pre.code
		|{
		|	"name": "myproject",
		|	"description": "A little web service of mine.",
		|	"authors": ["Peter Parker"],
		|	"homepage": "http://myproject.example.com",
		|	"license": "GPL-2.0",
		|	"dependencies": {
		|		"vibe-d": "~&gt;0.7.23"
		|	}
		|}

	p Please keep the description concise (not more than 100 characters) and avoid including unspecific information such as the fact that the package is written in D. The same goes for the package name - since <em>all</em> DUB packages are written in D, it's usually better to avoid mentioning D explicitly, unless the package is for example a high-level wrapper around a C/C++ library.

	h2 Contents

	nav
		ul
			li
				a(href="#standard-settings") Global settings
				ul
					li: a(href="#sub-packages") Sub packages
					li: a(href="#licenses") License specifications
			li
				a(href="#build-settings") Build settings
				ul
					li: a(href="#version-specs") Version specifications
					li: a(href="#target-types") Target types
					li: a(href="#build-requirements") Build requirements
					li: a(href="#build-options") Build options
					li: a(href="#environment-variables") Environment variables
			li
				a(href="#configurations") Configurations
				ul
					li: a(href="#configuration-settings") Specific settings
			li
				a(href="#build-types") Build types
			li
				a(href="#toolchain-requirements") Toolchain requirements



	a#standard-fields
	h2#standard-settings Global settings

	p In addition to the settings listed here, all <a href="#build-settings">build settings</a> are allowed at the global scope.

	table
		tr
			th Name
			th Type
			th Description

		tr
			td name [required]
			td: code string
			td Name of the package, used to uniquely identify the package. Must be comprised of only lower case ASCII alpha-numeric characters, "-" or "_".

		tr
			td description [required for publishing]
			td: code string
			td Brief description of the package

		tr
			td toolchainRequirements
			td: code string[string]
			td Set of version requirements for DUB, for compilers and for language frontend. See the <a href="#toolchain-requirements">toolchain requirements</a> section.

		tr
			td homepage
			td: code string
			td URL of the project website

		tr
			td authors
			td: code string[]
			td List of project authors (the suggested format is either <code>"Peter Parker"</code> or <code>"Peter Parker &lt;pparker@example.com&gt;"</code>)

		tr
			td copyright
			td: code string
			td Copyright declaration string

		tr
			td license [required for publishing]
			td: code string
			td License(s) under which the project can be used - see the <a href="#licenses">license specification</a> section for possible values

		tr
			td subPackages
			td: code T[]
			td Defines an array of sub-packages defined in the same directory as the root project, where each entry is either a path of a sub folder or an object of the same format as a dub.json file - see the <a href="#sub-packages">sub package section</a> for more information

		tr
			td configurations
			td: code T[]
			td Speficies an optional list of build configurations (chosen on the command line using <code>--config=...</code>) - see the <a href="#configurations">configurations section</a> for more details

		tr
			td buildTypes
			td: code T[string]
			td Defines additional custom build types or overrides the default ones (chosen on the command line using <code>--build=...</code>) - see the <a href="#build-types">build types section</a> for an example

		tr
			td -ddoxFilterArgs
			td: code string[]
			td Specifies a list of command line flags usable for controlling filter behavior for --build=ddox <span style="color: red;">[experimental]</span>


	h3#sub-packages Sub packages

	p A package may contain an arbitrary number of additional publicly visible packages. These packages can be defined in the <code>"subPackages"</code> section of the main dub.json file. They can be referenced by concatenating their name with the name of the main package using a colon as the delimiter (i.e. <code>"main-package-name:sub-package-name"</code>).

	p The typical use for this feature is to split up a library into a number of parts without breaking it up into different code repositories:

	pre.code
		|{
		|	"name": "mylib",
		|	"targetType": "none",
		|	"dependencies": {
		|		"mylib:component1": "*",
		|		"mylib:component2": "*"
		|	},
		|	"subPackages": [
		|		"./component1/",
		|		"./component2/"
		|	]
		|}
	p <code>/dub.json</code>

	pre.code
		|{
		|	"name": "component1",
		|	"targetType": "library"
		|}
	p <code>/component1/dub.json</code>

	p The sub directories /component1 and /component2 then contain normal packages and can be referred to as "mylib:component1" and "mylib:component2" from outside projects. To refer to sub packages within the same repository use the <code>"*"</code> version specifier.

	p It is also possible to define the sub packages within the root package file, but note that it is generally discouraged to put the source code of multiple sub packages into the same source folder. Doing so can lead to hidden dependencies to sub packages that haven't been explicitly stated in the "dependencies" section. These hidden dependencies can then result in build errors in conjunction with certain build modes or dependency trees that may be hard to understand.

	pre.code
		|{
		|	"name": "mylib",
		|	"targetType": "none",
		|	"dependencies": {
		|		"mylib:component1": "*",
		|		"mylib:component2": "*"
		|	},
		|	"subPackages": [
		|		{
		|			"name": "component1",
		|			"targetType": "library",
		|			"sourcePaths": ["component1/source"],
		|			"importPaths": ["component1/source"]
		|		}
		|	]
		|}
	p <code>/dub.json</code>


	h3#licenses License specifications

	p The license setting should only contain one of the standard license identifiers if possible. At a later point in time, DUB may use this information to validate proper licensing in dependency hierarchies and output warnings when licenses don't match up. Multiple licenses can be separated using the term "or" and for versioned licenses, the postfix "or later" is allowed to also include any later version of the same license.

	p The standard license identifiers are:
		|<code>public domain</code>,
		|<code>AFL-3.0</code> (Academic Free License 3.0),
		|<code>AGPL-3.0</code> (Affero GNU Public License 3.0),
		|<code>Apache-2.0</code>,
		|<code>APSL-2.0</code> (Apple Public Source License),
		|<code>Artistic-2.0</code>,
		|<code>BSL-1.0</code> (Boost Software License),
		|<code>BSD 2-clause</code>,
		|<code>BSD 3-clause</code>,
		|<code>EPL-1.0</code> (Eclipse Public License),
		|<code>GPL-2.0</code>,
		|<code>GPL-3.0</code>,
		|<code>ISC</code>,
		|<code>LGPL-2.1</code>,
		|<code>LGPL-3.0</code>,
		|<code>MIT</code>,
		|<code>MPL-2.0</code> (Mozilla Public License 2.0),
		|<code>MS-PL</code> (Microsoft Public License),
		|<code>MS-RL</code> (Microsoft Reciprocal License),
		|<code>NCSA</code> (University of Illinois/NCSA Open Source License),
		|<code>OpenSSL</code> (OpenSSL License),
		|<code>SSLeay</code> (SSLeay License),
		|<code>Zlib</code> (zlib/libpng License)

	p Any other value is considered to be a proprietary license, which is assumed to be incompatible with any other license. If you think there is a license that should be included in this list, please file a quick <a href="https://github.com/rejectedsoftware/dub-registry/issues/new">bug report</a>. Please also note that pure D bindings of C/C++ libraries <em>should</em> specify the same license as the original library, although a stricter but compatible license can be used, too.

	p Some example license specifications:
	pre.code
		|"GPL-3.0"
		|"GPL-2.0 or later"
		|"GPL-2.0 or later or proprietary"
		|"GPL-2.0 or LGPL-3.0"
		|"LGPL-2.1 or proprietary"

	h2#build-settings Build settings

	p Build settings influence the command line options passed to the compiler and linker. All settings are optional.

	p Platform specific settings are supported through the use of field name suffixes. Suffixes are dash separated list of operating system/architecture/compiler identifiers, as defined in the <a href="http://dlang.org/version.html#PredefinedVersions">D language reference</a>, but converted to lower case. The order of these suffixes is <code>os-architecture-compiler</code>, where any of these parts can be left off. Additionally on Windows the architectures <code>x86_omf</code> and <code>x86_mscoff</code> can be used with dmd to differentiate between 32 bit object formats used with the <code>--arch</code> switch. Examples:

	pre.code
		|{
		|	"versions": ["PrintfDebugging"],
		|	"dflags-dmd": ["-vtls"],
		|	"versions-x86_64": ["UseAmd64Impl"]
		|	"libs-posix": ["ssl", "crypto"],
		|	"sourceFiles-windows-x86_64-dmd": ["libs/windows-x86_64/mylib.lib"],
		|	"sourceFiles-windows-x86_omf-dmd": ["libs/windows-x86_omf/mylib.lib"],
		|	"sourceFiles-windows-x86_mscoff-dmd": ["libs/windows-x86_mscoff/mylib.lib"],
		|}

	table
		tr
			th Name
			th Type
			th Description

		tr
			td dependencies
			td: code T[string]
			td List of project dependencies given as pairs of <code>"&lt;name&gt;" : &lt;version-spec&gt;</code> - see <a href="#version-specs">next section</a> for what version specifications look like - this setting does not support platform suffixes

		tr
			td systemDependencies
			td: code string
			td A textual description of the required system dependencies (external C libraries) required by the package. This will be visible on the registry and will be displayed in case of linker errors - this setting does not support platform suffixes

		tr
			td targetType
			td: code string
			td Specifies a specific <a href="#target-types">target type</a> - this setting does not support platform suffixes

		tr
			td targetName
			td: code string
			td Sets the base name of the output file; type and platform specific pre- and suffixes are added automatically - this setting does not support platform suffixes

		tr
			td targetPath
			td: code string
			td The destination path of the output binary - this setting does not support platform suffixes

		tr
			td workingDirectory
			td: code string
			td A fixed working directory from which the generated executable will be run - this setting does not support platform suffixes

		tr
			td subConfigurations
			td: code string[string]
			td Locks the dependencies to specific configurations; a map from package name to configuration name, see also the <a href="#configurations">configurations section</a> - this setting does not support platform suffixes

		tr
			td buildRequirements
			td: code string[]
			td List of required settings for the build process. See the <a href="#build-requirements">build requirements section</a> for details.

		tr
			td buildOptions
			td: code string[]
			td List of build option identifiers (corresponding to compiler flags) - see the <a href="#build-options">build options section</a> for details.

		tr
			td libs
			td: code string[]
			td A list of external library names - depending on the compiler, these will be converted to the proper linker flag (e.g. "ssl" might get translated to "-L-lssl"). On Posix platforms dub will try to find the correct linker flags by using <a href="https://www.freedesktop.org/wiki/Software/pkg-config/">pkg-config</a>

		tr
			td sourceFiles
			td: code string[]
			td Additional files passed to the compiler - can be useful to add certain configuration dependent source files that are not contained in the general source folder

		tr
			td sourcePaths
			td: code string[]
			td Allows to customize the path where to look for source files (any folder "source" or "src" is automatically used as a source path if no <code>sourcePaths</code> setting is specified) - note that you usually also need to define <code>"importPaths"</code> as <code>"sourcePaths"</code> don't influence those

		tr
			td excludedSourceFiles
			td: code string[]
			td Files that should be removed for the set of already added source files (takes precedence over "sourceFiles" and "sourcePaths") - <a href="http://dlang.org/phobos/std_path.html#.globMatch">Glob matching</a> can be used to pattern match multiple files at once

		tr
			td mainSourceFile
			td: code string
			td Determines the file that contains the <code>main()</code> function. This setting can be used by dub to exclude this file in situations where a different main function is defined (e.g. for "dub test") - this setting does not support platform suffixes

		tr
			td copyFiles
			td: code string[]
			td A list of <a href="http://dlang.org/phobos/std_path.html#.globMatch">globs</a> matching files or directories to be copied to <code>targetPath</code>. Matching directories are copied recursively, i.e. <code>"copyFiles": ["path/to/dir"]"</code> recursively copies <code>dir</code>, while <code>"copyFiles": ["path/to/dir/*"]"</code> only copies files within <code>dir</code>.

		tr
			td extraDependencyFiles
			td: code string[]
			td A list of <a href="http://dlang.org/phobos/std_path.html#.globMatch">globs</a> matching files to be checked for rebuilding the dub project.

		tr
			td versions
			td: code string[]
			td A list of D versions to be defined during compilation

		tr
			td debugVersions
			td: code string[]
			td A list of D debug identifiers to be defined during compilation

		tr
			td importPaths
			td: code string[]
			td Additional import paths to search for D modules (the <code>source/</code> folder is used by default as a source folder, if it exists)

		tr
			td stringImportPaths
			td: code string[]
			td Additional import paths to search for string imports/views (the <code>views/</code> folder is used by default as a string import folder, if it exists)
		tr
			td preGenerateCommands
			td: code string[]
			td A list of shell commands that is always executed before project generation is started
		tr
			td postGenerateCommands
			td: code string[]
			td A list of shell commands that is always executed after project generation is finished
		tr
			td preBuildCommands
			td: code string[]
			td A list of shell commands that is executed before the package is built
		tr
			td postBuildCommands
			td: code string[]
			td A list of shell commands that is executed after the package is built
		tr
			td preRunCommands
			td: code string[]
			td A list of shell commands that is executed always before the project is run
		tr
			td postRunCommands
			td: code string[]
			td A list of shell commands that is executed always after the project is run

		tr
			td dflags
			td: code string[]
			td Additional flags passed to the D compiler - note that these flags are usually specific to the compiler in use, but a set of flags is automatically translated from DMD to the selected compiler

		tr
			td lflags
			td: code string[]
			td Additional flags passed to the linker - note that these flags are usually specific to the linker in use

		tr
			td injectSourceFiles
			td: code string[]
			td Source files that will be compiled into binaries that depend on this package. Warning: this should be under a permissive license (like Boost) or you risk infecting a users binary with an incompatible license.

	h3#version-specs Version specifications
	p A version specification can either be a simple declaration or a more complex variant, allowing more control.

	ul
		li Simple variant:
			p: code "&lt;name&gt;" : "&lt;version-specifier&gt;"
			p This is the usual way to specify a dependency.

		li Complex variant:
			p: code "&lt;name&gt;" : { "&lt;attribute&gt;": "&lt;value&gt;"[, ...] }
			p The following attributes can be used to to control how a dependency is resolved:
			ul
				li
					p <code>"version": "&lt;version-specifier&gt;"</code> - The version specification as used for the simple form
					p A version specification should only be specified when no <code>"path"</code> attribute is present, or when compatibility with older versions of DUB (&lt; 0.9.22) is desired.
				li
					p <code>"path": "&lt;path-to-package&gt;"</code> - Use a folder to source a package from.
					p References a package in a specific path. This can be used in situations where a specific copy of a package needs to be used. Examples of this include packages that are included as GIT submodules, or packages in sub folders of the main package, such as example projects.
				li
					p <code>"optional": true</code> - Indicates an optional dependency.
					p With this set to <code>true</code>, the dependency will only be used if explicitly selected in dub.selections.json. If omitted, this attribute defaults to <code>false</code>.
					p Note that versions prior to 0.9.25 used to choose an optional dependency !{iff} it was available on the local machine.
				li
					p <code>"default": true</code> - Choose an optional dependency by default.
					p With this set to <code>true</code>, the dependency will be chosen by default if no dub.selections.json exists yet. If omitted, this attribute defaults to <code>false</code>. Note that this only has an effect if the "optional" attribute is set to <code>true</code>.
					p Note that versions prior to 0.9.25 will ignore this attribute.
				li
					p Since v1.24.0, <a href="#build-settings">build settings</a> fields can be used to be applied to dependencies.
					p Note that as of v1.24.0 only <code>dflags</code> is taken into account.

	p#version-syntax Version specifiers define a range of acceptable versions. They can be specified in any of the following ways:
	ul
		li Restrict to a certain minor version: <code>"~&gt;2.2.13"</code>, equivalent to <code>"&gt;=2.2.13 &lt;2.3.0"</code>
		li Restrict to a certain major version: <code>"~&gt;2.2"</code>, equivalent to <code>"&gt;=2.2.0 &lt;3.0.0"</code>
		li Require a certain version: <code>"==1.3.0"</code>
		li Require a minimum version: <code>"&gt;=1.3.0"</code>
		li Require a version range: <code>"&gt;=1.3.0 &lt;=1.3.4"</code>
		li Match any released version (equivalent to <code>"&gt;=0.0.0"</code>): <code>"*"</code>
		li Use a GIT branch (deprecated): <code>"~master"</code>

	p Numbered versions are formatted and compared according to the <a href="http://semver.org/">SemVer specification</a>. The recommended way to specify versions is using the <code>~&gt;</code> operator as a way to balance between flexible upgrades and reducing the risk of code breakage.

	p Whenever you refer to (sub) packages within the same repository, use the "any version" version specifier: <code>"*"</code>


	h3#target-types Target types

	p The following values are recognized for the <code>"targetType"</code> setting:

	table
		tr
			th Value
			th Description
		tr
			td "autodetect"
			td Automatically detects the target type. This is the default global value and causes dub to try and generate "application" and "library" <a href="#configurations">configurations</a>. Use of other values limits the auto-generated configurations to either of the two. This value is not allowed inside of a configuration block.

		tr
			td "none"
			td Does not generate an output file. This is useful for packages that are supposed to drag in other packages using the "dependencies" section.

		tr
			td "executable"</code>
			td Generates an executable binary

		tr
			td "library"</code>
			td Specifies that the package is to be used as a library, without limiting the actual type of library. This should be the default for most libraries.

		tr
			td "sourceLibrary"</code>
			td This target type does not generate a binary, but rather forces dub to add all source files directly to the same compiler invocation as the dependent project.

		tr
			td "staticLibrary"</code>
			td Forces output as a static library container.

		tr
			td "dynamicLibrary"</code>
			td Forces output as a dynamic/shared library.

	h3#build-requirements Build requirements

	p The following values are recognized as array items for the "buildRequirements" setting:

	table
		tr
			th Value
			th Description
		tr
			td "allowWarnings"
			td Warnings do not abort compilation
		tr
			td "silenceWarnings"
			td Don't show warnings
		tr
			td "disallowDeprecations"
			td Using deprecated features aborts compilation
		tr
			td "silenceDeprecations"
			td Don't show deprecation warnings
		tr
			td "disallowInlining"
			td Avoid function inlining, even in release builds
		tr
			td "disallowOptimization"
			td Avoid optimizations, even in release builds
		tr
			td "requireBoundsCheck"
			td Always perform bounds checks
		tr
			td "requireContracts"
			td Leave assertions and contracts enabled in release builds
		tr
			td "relaxProperties"
			td Do not enforce strict property handling (removes the -property switch) <span style="color: red;">[deprecated, recent versions of DUB never issue -property]</span>
		tr
			td "noDefaultFlags"
			td Does not emit build type specific flags (e.g. -debug, -cov or -unittest). <span style="color: red;">Note that this flag should never be used for released packages and is indended purely as a development/debugging tool. Using "-build=plain" may also be a more appropriate alternative.</span>

	h3#build-options Build options

	p The "buildOptions" setting provides a compiler agnostic way to specify common compiler options/flags. Note that many of these options are implicitly managed by the <a href="#build-requirements">"buildRequirements"</a> setting and most others usually only occur in <a href="#custom-build-types">"buildTypes"</a> blocks. It supports the following values:

	table
		tr
			th Value
			th Description
			th Corresponding DMD flag
		tr
			td "debugMode"
			td Compile in debug mode (enables contracts)
			td -debug
		tr
			td "releaseMode"
			td Compile in release mode (disables assertions and bounds checks)
			td -release
		tr
			td "coverage"
			td Enable code coverage analysis
			td -cov
		tr
			td "coverageCTFE"
			td Enable code coverage analysis (including code executed at compile-time via CTFE)
			td -cov=ctfe
		tr
			td "debugInfo"
			td Enable symbolic debug information
			td -g
		tr
			td "debugInfoC"
			td Enable symbolic debug information in C compatible form
			td -gc
		tr
			td "alwaysStackFrame"
			td Always generate a stack frame
			td -gs
		tr
			td "stackStomping"
			td Perform stack stomping
			td -gx
		tr
			td "inline"
			td Perform function inlining
			td -inline
		tr
			td "noBoundsCheck"
			td Disable all bounds checking
			td -boundscheck=off
		tr
			td "optimize"
			td Enable optimizations
			td -O
		tr
			td "profile"
			td Emit profiling code
			td -profile
		tr
			td "profileGC"
			td Emit GC profiling information
			td -profile=gc
		tr
			td "unittests"
			td Compile unit tests
			td -unittest
		tr
			td "verbose"
			td Verbose compiler output
			td -v
		tr
			td "ignoreUnknownPragmas"
			td Ignores unknown pragmas during compilation
			td -ignore
		tr
			td "syntaxOnly"
			td Don't generate object files
			td -o-
		tr
			td "warnings"
			td Enable warnings, enabled by default (use "buildRequirements" to control this setting)
			td -wi
		tr
			td "warningsAsErrors"
			td Treat warnings as errors (use "buildRequirements" to control this setting)
			td -w
		tr
			td "ignoreDeprecations"
			td Do not warn about using deprecated features (use "buildRequirements" to control this setting)
			td -d
		tr
			td "deprecationWarnings"
			td Warn about using deprecated features, enabled by default (use "buildRequirements" to control this setting)
			td -dw
		tr
			td "deprecationErrors"
			td Stop compilation upon usage of deprecated features (use "buildRequirements" to control this setting)
			td -de
		tr
			td "property"
			td Enforce property syntax - <span style="color: red;">deprecated</span>
			td -property
		tr
			td "betterC"
			td Compile in betterC mode
			td -betterC
		tr
			td "lowmem"
			td Enable the garbage collector for the compiler(dmd/ldc), reducing the compiler memory requirements but increasing compile times.
			td -lowmem

	h3#environment-variables Environment variables
	include inc.package_format.envvars


	h2#configurations Configurations

	p In addition to platform specific build settings, it is possible to define build configurations. Build configurations add or override build settings to the global ones. To choose a configuration, use <code>dub --config=&lt;name&gt;</code>. By default, the first configuration that matches the target type and build platform is selected automatically. The configurations are defined by adding a "configurations" section.

	p If no configurations are specified, dub automatically tries to detect the two default configurations "application" and "library". The "application" configuration is only added if at least one of the following files is found: <code>source/app.d</code>, <code>source/main.d</code>, <code>source/&lt;package name&gt;/app.d</code>, <code>source/&lt;package name&gt;/main.d</code>, <code>src/app.d</code>, <code>src/main.d</code>, <code>src/&lt;package name&gt;/app.d</code>, <code>src/&lt;package name&gt;/main.d</code>. Those files are expected to contain only the application entry point (usually <code>main()</code>) and are only added to the "application" configuration.

	p The configuration name "unittest" has a special meaning - if a configuration with this name is present, it will be used by default when executing <code>dub test</code>. It can be assumed to have the <code>-unittest</code> flag present (through the "unittest" build type). Possible use cases for custom unittest configurations overriding the default behavior of excluding the main source file or adding additional modules containing additional external tests, which don't need to be compiled in the application/library mode.

	p When defining a configuration's platform, any of the suffixes described in <a href="#build-settings">build settings</a> may be combined to make the configuration as specific as necessary.

	p The following example defines "metro-app" and "desktop-app" configurations that are only available on Windows and a "glut-app" configuration that is available on all platforms.

	pre.code
		|{
		|	...
		|	"name": "somepackage",
		|	"configurations": [
		|		{
		|			"name": "metro-app",
		|			"targetType": "executable",
		|			"platforms": ["windows"],
		|			"versions": ["MetroApp"],
		|			"libs": ["d3d11"]
		|		},
		|		{
		|			"name": "desktop-app",
		|			"targetType": "executable",
		|			"platforms": ["windows"],
		|			"versions": ["DesktopApp"],
		|			"libs": ["d3d9"]
		|		},
		|		{
		|			"name": "glut-app",
		|			"targetType": "executable",
		|			"versions": ["GlutApp"]
		|		}
		|	]
		|}

	p You can choose a specific configuration for certain dependencies by using the "subConfigurations" section:

	pre.code
		|{
		|	...
		|	"dependencies": {
		|		"somepackage": "&gt;=1.0.0"
		|	},
		|	"subConfigurations": {
		|		"somepackage": "glut-app"
		|	}
		|}

	p If no configuration is specified for a package, the first one that matches the current platform is chosen (see the "platforms" setting below).


	a#configuration-fields
	h3#configuration-settings Configuration block specific settings

	p In addition to the usual <a href="#build-settings">build settings</a>, the following settings are recognized inside of a configuration block:

	table
		tr
			th Name
			th Type
			th Description

		tr
			td name [required]
			td: code string
			td Name of the configuration
		tr
			td platforms
			td: code string[]
			td A list of platform suffixes (as used for the build settings) to limit on which platforms the configuration applies

	h2#build-types Build types

	p By default, a set of predefined build types is already provided by DUB and can be specified using <code>dub build --build=&lt;name&gt;</code>:

	table
		tr
			th Name
			th Build options
		tr
			td plain
			td <code>[]</code>
		tr
			td debug
			td <code>["debugMode", "debugInfo"]</code>
		tr
			td release
			td <code>["releaseMode", "optimize", "inline"]</code>
		tr
			td release-debug
			td <code>["releaseMode", "optimize", "inline", "debugInfo"]</code>
		tr
			td release-nobounds
			td <code>["releaseMode", "optimize", "inline", "noBoundsCheck"]</code>
		tr
			td unittest
			td <code>["unittests", "debugMode", "debugInfo"]</code>
		tr
			td docs
			td <code>["syntaxOnly"]</code>, plus <code>"dflags": ["-c", "-Dddocs"]</code>
		tr
			td ddox
			td <code>["syntaxOnly"]</code>, plus <code>"dflags": ["-c", "-Df__dummy.html", "-Xfdocs.json"]</code>
		tr
			td profile
			td <code>["profile", "optimize", "inline", "debugInfo"]</code>
		tr
			td profile-gc
			td <code>["profileGC", "debugInfo"]</code>
		tr
			td cov
			td <code>["coverage", "debugInfo"]</code>
		tr
			td cov-ctfe
			td <code>["coverageCTFE", "debugInfo"]</code>
		tr
			td unittest-cov
			td <code>["unittests", "coverage", "debugMode", "debugInfo"]</code>
		tr
			td unittest-cov-ctfe
			td <code>["unittests", "coverageCTFE", "debugMode", "debugInfo"]</code>
		tr
			td syntax
			td <code>["syntaxOnly"]</code>

	p The existing build types can be customized and new build types can be added using the global <code>"buildTypes"</code> section. Each entry in <code>"buildTypes"</code> can use any of the low level <a href="#build-settings">build settings</a> (excluding "dependencies", "targetType", "targetName", "targetPath", "workingDirectory", "subConfigurations"). The build settings specified here will later be modified/augmented by the package/configuration specific settings.

	p An example that overrides the "debug" build type and defines a new "debug-profile" type:

	pre.code
		|{
		|	"name": "my-package",
		|	"buildTypes": {
		|		"debug": {
		|			"buildOptions": ["debugMode", "debugInfo", "optimize"]
		|		},
		|		"debug-profile": {
		|			"buildOptions": ["debugMode", "debugInfo", "profile"]
		|		}
		|	}
		|}

	h2#toolchain-requirements Toolchain requirements

	p The package can specify version requirements for the toolchain. Each requirement is specified with the <a href="#version-syntax">version dependency syntax</a>. For compilers, the keyword <code>no</code> can be specified instead of a version requirement to disallow the use of a specific compiler for the package. The following requirements are allowed:
	table
		tr
			th Identifier
			th Description
		tr
			td <code>"dub"</code>
			td DUB version requirement
		tr
			td <code>"frontend"</code>
			td D frontend version requirement
		tr
			td <code>"dmd"</code>
			td DMD version requirement
		tr
			td <code>"ldc"</code>
			td LDC version requirement
		tr
			td <code>"gdc"</code>
			td GDC version requirement

	p Example 1: package that needs at least dub-1.14 and uses D features introduced in frontend 2.068 and other features that will be deprecated in frontend 2.087
	pre.code
		|{
		|	"toolchainRequirements": {
		|		"dub": "&gt;=1.14.0",
		|		"frontend": "&gt;=2.068 &lt;2.087"
		|	}
		|}

	p Example 2: package that needs to be compiled with LDC from version 1.11
	pre.code
		|{
		|	"toolchainRequirements": {
		|		"dmd": "no",
		|		"gdc": "no",
		|		"ldc": "&gt;=1.11"
		|	}
		|}
