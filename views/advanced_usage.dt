extends layout

block title
	- auto title = "Advanced DUB Usage";

block body
	h2#app-arguments Pass commandline arguments to application

	p To pass command-line arguments to an application you're running, execute <code>dub run &lt;dub arguments&gt; -- &lt;application arguments&gt;</code>.

	h2#single-file Single-file packages

	p For small or script-like applications, DUB supports a special mode where the whole package is contained in a single .d file. The package recipe description can be embedded into code comments within the file:

	pre.code.
		#!/usr/bin/env dub
		/+ dub.sdl:
			name "hello"
		+/
		void main() {
			import std.stdio : writeln;
			writeln("Hello, World!");
		}

	p This application can be executed by running <code>dub run --single hello.d</code>, or just compiled with <code>dub build --single hello.d</code>.

	p In addition to the normal method of passing commandline arguments, you can use the shorthand <code>dub hello.d &lt;arguments to hello&gt;</code>. This shorthand and the optional shebang allow you to run applications via <code>./hello &lt;arguments&gt;</code> from your shell if you set the executable bit of the file.

	p Single-file packages cannot be used to create library packages.

	h2#local-deps Using dependencies not published on the registry

	p There are various options to use packages not published on the registry:

	dl
		dt <code>dub add-path</code>
		dd Adds a local search directory. All direct subdirectories will be searched for packages. Local search directories are always searched before looking up packages from the registry.

		dt <code>dub add-local</code>
		dd Similar to the above, but only adds a single package directory.

		dt <code>dub add-override</code>
		dd Overrides a certain version or version range of a package with another version, branch, or path. This can be used to change dependencies system-wide without modifying a package's description or selection files.

		dt Path-based dependencies
		dd Package descriptions in the <code>dub.json/dub.sdl</code> can specify a path instead of a version; this can be used with Git submodules or subtrees, or with a known directory layout, to use arbitrarily defined versions of a dependency. Note that this should only be used for non-public packages.

		dt Path-based selections
		dd You can specify arbitrary versions, branches, and paths in the <code>dub.selections.json</code> file, even if they contradict the dependency specification of the packages involved (note that DUB will output a warning in that case).

	p Execute <code>dub &lt;command&gt; -h</code> for more information on these commands.

	h2#subpkg Managing subpackages

	p For adding subpackages from the registry, execute <code> dub add &lt;packagename&gt;:&lt;subpackage&gt; </code>

	p If you need to compile a subpackage only, use <code> dub build :&lt;subpackage&gt; </code>

	h2#have-version Conditional compilation according to dependency presence

	p Projects can have additional special dependencies for specific configurations.

	pre.code
		|"configurations": [
		|	{
		|		"name": "myconfig",
		|		"dependencies": {
		|			"mydep": { "version": "*" }
		|		}
		|	}
		|]

	p DUB provides version identifier of dependencies for conditional compilation with <a href="https://dlang.org/spec/version.html#version">version conditions</a>. <code>Have_&lt;dependency&gt;</code> version identifier can be used for conditional compilation.

	p
		strong NOTE: Special characters other than identifier characters (<code>[a-z, A-Z, 0-9, _]</code>) in dependency name are replaced with <code>_</code> character in version identifier.

	pre.code.
		version (Have_mydep) {
			import mydep;
		}
